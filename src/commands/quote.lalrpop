use std::borrow::Cow;

use super::{Column, Ast, Op, unescape, parse_emoji, parse_emoji_name};

grammar;

extern {
    type Error = std::convert::Infallible;
}

pub Query: Ast<'input> = {
    Disjunction,
}

Disjunction: Ast<'input> = {
    <left:Disjunction> "|" <right:Conjunction> => left.or(right),
    Conjunction,
}

Conjunction: Ast<'input> = {
    <left:Conjunction> <right:Term> => left.and(right),
    Term,
}

Term: Ast<'input> = {
    <column:Column> <op:Op> <term:String> => Ast::Column {<>},
    String => Ast::Bare(<>),
    "(" <Disjunction> ")",
}

Op: Op = {
    ":" => Op::Fuzzy,
    "<" => Op::Less,
    "=" => Op::Equal,
    ">" => Op::Greater,
    "<=" => Op::LessEqual,
    ">=" => Op::GreaterEqual,
}

Column: Column = {
    "context" => Column::Context,
    "date" => Column::Date,
    "from" => Column::Name,
    "game" => Column::Game,
    "id" => Column::Id,
    "name" => Column::Name,
    "quote" => Column::Quote,
    "show" => Column::Show,
    "text" => Column::Quote,
}

String: Cow<'input, str> = {
    QuotedString => unescape(<>),
    UnquotedWord => Cow::Borrowed(<>),
    EmojiName => Cow::Borrowed(parse_emoji_name(<>)),
    FullEmoji => Cow::Borrowed(parse_emoji(<>)),

    // Copied from the `Column` rule as otherwise you get a parse error when a column name is used
    // as a bare word.
    "context" => Cow::Borrowed(<>),
    "date" => Cow::Borrowed(<>),
    "from" => Cow::Borrowed(<>),
    "game" => Cow::Borrowed(<>),
    "id" => Cow::Borrowed(<>),
    "name" => Cow::Borrowed(<>),
    "quote" => Cow::Borrowed(<>),
    "show" => Cow::Borrowed(<>),
    "text" => Cow::Borrowed(<>),
}

match {
    // Column names are case-insensitive.
    r"(?i)context" => "context",
    r"(?i)date" => "date",
    r"(?i)from" => "from",
    r"(?i)game" => "game",
    r"(?i)id" => "id",
    r"(?i)name" => "name",
    r"(?i)quote" => "quote",
    r"(?i)show" => "show",
    r"(?i)text" => "text",

    r#""([^"]|\\.)*""# => QuotedString,
    r":\w+:" => EmojiName,
    r"<:\w+:\d+>" => FullEmoji,
} else {
    r"[^\p{space}\p{gc=Control}\p{gc=Unassigned}:|<=>()]+" => UnquotedWord,
    _,
}
